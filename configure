#!/bin/bash
# This file is not generated by autoconf
# Please do not try to modify this file

CONF_MAKEDIR(){
    echo Please enter your user password.
	sudo mkdir /tool
	sudo mkdir /KS
}

CONF_TAR(){
    sudo cd /tool
	mkdir 7.9
	tar -xvf $SOURCEFILE
}

CONF_SHELL_BASH(){
	echo -n 'Checking current Shell ... '
	SH=$(echo $SHELL|sed -rne 's@.*/@@p')
	echo $SH
	if [ "x$SH" = "xbash" ];then
		return 0
	else
		echo "Please use bash to configure"
		echo "Please run following command and relogin:"
		echo "chsh -s /bin/bash $USER"
		exit 1
	fi
}

CONF_SH_BASH(){
	echo -n 'Checking sh Shell ... '
	SH=$(readlink -f /bin/sh|sed -rne 's@.*/@@p')
	echo $SH
	if [ "x$SH" = "xbash" ];then
		return 0
	else
		echo "Please use bash as sh"
		echo "Please run following command with root and select No:"
		echo "dpkg-reconfigure $SH"
		exit 1
	fi
}

CONF_YACC(){
	echo -n 'Checking yacc ... '
	YACC="/usr/bin/yacc"
	if [ -f $YACC ];then
		echo $YACC
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install bison -y"
		exit 1
	fi
}

CONF_YACC_BISON(){
	echo -n 'Checking yacc is something bison ... '
	YACC="/usr/bin/yacc"
	BISON_YACC=$(readlink -f $YACC|sed -rne 's@.*/@@p')
	echo $BISON_YACC|grep bison > /dev/null
	BISON=$?
	if [ $BISON -eq 0 ];then
		echo yes
		return 0
	else
		cat $YACC |grep bison > /dev/null
		BISON=$?
		if [ $BISON -eq 0 ];then
			echo yes
			return 0
		else
			echo no
			echo "Please install following packages as root:"
			echo "bison"
			exit 1
		fi
	fi
}

CONF_AWK(){
	echo -n 'Checking awk ... '
	AWK="/usr/bin/awk"
	if [ -f $AWK ];then
		echo $AWK
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "gawk"
		exit 1
	fi
}

CONF_AWK_GAWK(){
	echo -n 'Checking awk is something gawk ... '
	AWK="/usr/bin/awk"
	GAWK_AWK=$(readlink -f $AWK|sed -rne 's@.*/@@p')
	echo $GAWK_AWK|grep gawk > /dev/null
	GAWK=$?
	if [ $GAWK -eq 0 ];then
		echo yes
		return 0
	else
		cat $AWK |grep bison > /dev/null
		GAWK=$?
		if [ $GAWK -eq 0 ];then
			echo yes
			return 0
		else
			echo no
			echo "Please install following packages as root:"
			echo "gawk"
			exit 1
		fi
	fi
}

CONF_LOG(){
	echo -n "Creating config.detail ... "
	./version-check.sh > config.detail
	./library-check.sh >> config.detail
	echo done
}

CONF_MAKEINFO(){
	echo -n 'Checking makeinfo ... '
	MAKEINFO="/usr/bin/makeinfo"
	if [ -f $MAKEINFO ];then
		echo $MAKEINFO
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "texinfo"
		exit 1
	fi
}

CONF_PERL(){
	echo -n 'Checking perl ... '
	perl="/usr/bin/perl"
	if [ -f $perl ];then
		echo $perl
		return 0
	else
		echo "not found"
		echo "Please run following command with root:"
		echo "apt install perl-base -y"
		exit 1
	fi
}

CONF_PATCH(){
	echo -n 'Checking patch ... '
	patch="/usr/bin/patch"
	if [ -f $patch ];then
		echo $patch
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "patch"
		exit 1
	fi
}

CONF_MAKE(){
	echo -n 'Checking make ... '
	make="/usr/bin/make"
	if [ -f $make ];then
		echo $make
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "make"
		exit 1
	fi
}

CONF_M4(){
	echo -n 'Checking m4 ... '
	m4="/usr/bin/m4"
	if [ -f $m4 ];then
		echo $m4
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "m4"
		exit 1
	fi
}

CONF_LDD(){
	echo -n 'Checking ldd ... '
	ldd="/usr/bin/ldd"
	if [ -f $ldd ];then
		echo $ldd
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "libc-bin"
		exit 1
	fi
}

CONF_C_COMPILE(){
	CCC=$1
	CC=$(readlink -f $CCC|sed -rne 's@.*/@@p')
	echo -n "Checking $CC works ... "
	cat > c.c <<EOF
	int main(){return 0;}
EOF
	$CC c.c 2>/dev/null
	if [ -f a.out ];then
		echo "yes"
	else
		echo "no"
		exit 1
	fi
	rm a.out
	rm c.c
}

CONF_GCC(){
	echo -n 'Checking gcc ... '
	gcc="/usr/bin/gcc"
	if [ -f $gcc ];then
		echo $gcc
		CONF_C_COMPILE $gcc
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "gcc"
		exit 1
	fi
}

CONF_GXX(){
	echo -n 'Checking g++ ... '
	gxx="/usr/bin/g++"
	if [ -f $gxx ];then
		echo $gxx
		CONF_C_COMPILE $gxx
		return 0
	else
		echo "not found"
		echo "Please install following packages as root:"
		echo "g++"
		exit 1
	fi

}

CONF_LIBGCC(){
	LIBGMP="/usr/lib/libgmp.la"
	LIBMPFR="/usr/lib/libmpfr.la"
	LIBMPC="/usr/lib/libmpc.la"
	GMP=0
	MPFR=0
	MPC=0
	echo -n "Checking libgmp.la 32bit Library ... "	
	if [ -f $LIBGMP ];then
		echo $LIBGMP
	else
		echo "not found"
		GMP=1
	fi
	echo -n "Checking libmpfr.la 32bit Library ... "	
	if [ -f $LIBMPFR ];then
		echo $LIBMPFR
	else
		echo "not found"
		MPFR=1
	fi
	echo -n "Checking libmpc.la 32bit Library ... "	
	if [ -f $LIBMPC ];then
		echo $LIBMPC
	else
		echo "not found"
		MPC=1
	fi
	if [ $MPC -eq 0 ] && [ $MPFR -eq 0 ] && [ $GMP -eq 0 ];then
		return 0
	elif [ $MPC -eq 1 ] && [ $MPFR -eq 1 ] && [ $GMP -eq 1 ];then
		return 0
	else
		echo "libgmp, libmpc and libmpfr must be all present or all non-exists"
		echo "Please install or remove following packages as root::"
		echo "install) libgmp-dev libmpfr-dev libmpc-dev"
		echo "remove)  libgmp-dev libmpfr-dev libmpc-dev"
		exit 1
	fi
}

CONF_LIBGCC64(){
	LIBGMP="/usr/lib64/libgmp.la"
	LIBMPFR="/usr/lib64/libmpfr.la"
	LIBMPC="/usr/lib64/libmpc.la"
	GMP=0
	MPFR=0
	MPC=0
	echo -n "Checking libgmp.la 64bit Library ... "	
	if [ -f $LIBGMP ];then
		echo $LIBGMP
	else
		echo "not found"
		GMP=1
	fi
	echo -n "Checking libmpfr.la 64bit Library ... "	
	if [ -f $LIBMPFR ];then
		echo $LIBMPFR
	else
		echo "not found"
		MPFR=1
	fi
	echo -n "Checking libmpc.la 64bit Library ... "	
	if [ -f $LIBMPC ];then
		echo $LIBMPC
	else
		echo "not found"
		MPC=1
	fi
	if [ $MPC -eq 0 ] && [ $MPFR -eq 0 ] && [ $GMP -eq 0 ];then
		return 0
	elif [ $MPC -eq 1 ] && [ $MPFR -eq 1 ] && [ $GMP -eq 1 ];then
		return 0
	else
		echo "libgmp, libmpc and libmpfr must be all present or all non-exists"
		echo "Please install or remove following packages as root:"
		echo "install)libgmp-dev libmpfr-dev libmpc-dev"
		echo "remove) libgmp-dev libmpfr-dev libmpc-dev"
		exit 1
	fi
}

CONF_ROOT(){
	echo -n "Checking current user is root ... "
	U=$(whoami)
	if [ "$U" = "root" ];then
		echo yes
		if [ $FORCE_UNSAFE_CONFIGURE ] && [ $FORCE_UNSAFE_CONFIGURE -eq 1 ];then
			return 0
		else
			echo "Root User is not recommended, if you want to do so"
			echo "Please run following command and retry:"
			echo "export FORCE_UNSAFE_CONFIGURE=1"
			exit 1
		fi
	else
		echo no
		return 0
	fi
}

CONF_DEBIAN(){
	#Disabled.
	DEBIAN=0
	UBUNTU=0
	KALI=0
	KS=0
	DEEPIN=0
	
	echo -n "Checking OS Type ... "
	OSTYPE=$(cat /etc/issue|sed -rne "s/ .*//p")
	echo $OSTYPE
	case $OSTYPE in
		Ubuntu)
			UBUNTU=1
			;;
		Debian)
			DEBIAN=1
			;;
		Kali)
			KALI=1
			;;
		Deepin)
			DEEPIN=1
			;;
		KSLinux|Kurosawa)
			KS=1
			;;
		*)			
			if [ $FORCE_NO_DEB_KPM_SYSTEM ] && [ $FORCE_NO_DEB_KPM_SYSTEM -eq 1 ];then
				return 0
			else
				echo "KSLinux can only build on deb-based systems or"
				echo "kpm-based systems,you can run following command"
				echo "to skip this check:"
				echo "export FORCE_NO_DEB_KPM_SYSTEM=1"
				exit 1
			fi
			;;			
	esac
	return 0
}

CONF_KPM(){
	echo -n 'Checking Package Manager ... '
	KPM="/usr/bin/kpm"
	DPKG="/usr/bin/dpkg"
	if [ -f $KPM ];then
		echo $KPM
		return 0
	elif [ -f $DPKG ];then
		echo $DPKG
		return 0
	else
		echo "not found"
		if [ $NO_PACKAGE_MANAGER ] && [ $NO_PACKAGE_MANAGER -eq 1 ];then
				return 0
		else
			echo "Please install Package Manager (dpkg) or (kpm) manually"
			echo "or run following command to skip this check:"
			echo "export NO_PACKAGE_MANAGER=1"
			exit 1
		fi
	fi
}

CONF_LANG(){
	if [ $PLANG -eq 1 ] || [ $PLANGUAGE -eq 1 ];then
		echo "yes"
		echo "You may meet some error while building some"
		echo "packages,run following command to solve:"
		echo "unset LANG; unset LANGUAGE;"
	else
		echo "no"
		return 0
	fi
}

SHOW_HELP(){
	SHOW_VERSION
	echo ""
	echo "--------------------------"
	echo ""
	echo "Usage: configure [options]"
	echo ""
	echo "options:"
	echo "  --prefix=<prefix>  sets prefix dir (default: /ks/ramfs)"
	echo "  --target=<target>  sets build target (default: ARCH-ks-linux-gnu)"
	echo "                     ARCH=$(uname -m)"
	echo "  --cross=<cross>    sets cross complier build path (default: SYSROOT/cross)"
	echo "  --sysroot=<root>   sets sysroot dir (default: /tool)"
	echo "  --srcdir=<srcdir>  sets source dir which contains source (default: SYSROOT/src)"
	echo "  --tmpdir=<tmpdir>  sets temp dir to store temp files (default: SYSROOT/tmp)"
	echo "  --version          show version of configure"
	echo "  --help             show this help"
}

SHOW_VERSION(){
	echo "Kurasawa Configure Version: 1.0"
	echo "(C)Copyright Ruby Kurosawa 2000~2017"
	echo "This Script is licensed by Kurosawa"
	echo "Open Source License GPLv3-Compactible"
	echo "Version"
}

PARSE_ARGS(){
	TEMP=`getopt -o "" --long "prefix:,target:,sysroot:,srcdir:,tmpdir:,cross:,version,help" -n 'configure' -- "$@"`
	if [ $? != 0 ] ; then SHOW_HELP >&2 ; exit 1 ; fi

	eval set -- "$TEMP"
	while true ; do
			case "$1" in
					--prefix) PREFIX=$2; shift 2 ;; #KS
					--target) TARGET=$2; shift 2 ;; #LFS_TGT
					--cross)  CROSS=$2;  shift 2 ;; #CROSS
					--sysroot) SYSROOT=$2; shift 2 ;; #LIBPARENT
					--srcdir) SRCDIR=$2; shift 2 ;; #SOURCEROOT
					--tmpdir) TMPDIR=$2; shift 2 ;; #BUILDTMP
					--version) SHOW_VERSION; exit 0;; #VERSION
					--help) SHOW_HELP; exit 0;; #HELP
					--) shift ; break ;;
					*) SHOW_HELP; exit 1 ;;
			esac
	done
}

CONF_PREINIT(){
	PLANG=0
	PLANGUAGE=0
	if [ $LANG ];then PLANG=1; unset LANG; fi
	if [ $LANGUAGE ];then PLANGUAGE=1; unset LANGUAGE; fi
	PREFIX=/ks/ramfs
	TARGET=$(uname -m)-ks-linux-gnu
	SYSROOT=/tool
	CROSS=$SYSROOT/cross
	SRCDIR=$SYSROOT/src
	TMPDIR=$SYSROOT/tmp
}

CONF_CHECK_DIR(){
	NAME=$2
	VALUE=$3
	TRY=$1
	echo -n "Checking $NAME ..."
	if [ -d $VALUE ];then
		echo "yes"
		if [ "$TRY" = "try" ];then
			echo -n "try to read $NAME ..."
			ls $VALUE 2>/dev/null 1>/dev/null
			if [ $? -eq 0 ];then
				echo "done"
			else
				echo "fail"
				exit 1
			fi
			echo -n "try to write $NAME ..."
			touch $VALUE/a 2>/dev/null 1>/dev/null
			if [ $? -eq 0 ];then
				echo "done"
				rm $VALUE/a
			else
				echo "fail"
				exit 1
			fi
			return 0;
		fi
	else
		echo "no"
		if [ "$TRY" = "try" ];then
			echo -n "try to create $NAME ..."
			mkdir -p $VALUE 2>/dev/null 1>/dev/null
			if [ $? -eq 0 ];then
				echo "done"
				rm -rf $VALUE >/dev/null
				return 0;
			else
				echo "fail"
				exit 1
			fi
		else
			exit 1
		fi
		
	fi
}

CONF_DIR(){
	CONF_CHECK_DIR try PREFIX $PREFIX
	CONF_CHECK_DIR no-try SYSROOT $SYSROOT
	CONF_CHECK_DIR try CROSS $CROSS
	CONF_CHECK_DIR try SRCDIR $SRCDIR
	CONF_CHECK_DIR try TMPDIR $TMPDIR
	return 0;
}

CONF_OUTPUT_ENV(){
	echo -n "Creating envsetup.sh ... "
	cat > envsetup.sh <<EOF
#!/bin/bash

export SRCROOT=$SRCDIR
export KS=$PREFIX
export BUILDTMP=$TMPDIR
export CROSS=$CROSS
export LIBPARENT=$SYSROOT
export SCRIPTROOT=$(pwd)
EOF
echo '
# set env var
rm -rf {$KS,$BUILDTMP,$CROSS} 2>/dev/null
mkdir -p {$KS,$BUILDTMP,$CROSS} 2>/dev/null

set +h
umask 022
LFS=$KS
LC_ALL=POSIX' >> envsetup.sh

cat >> envsetup.sh <<EOF
LFS_TGT=$TARGET
EOF
echo '
PATH=$CROSS/bin:/bin:/usr/bin
MAKE=make
MFLAGS=-j4
export LFS LC_ALL LFS_TGT PATH MAKE MFLAGS
'>>envsetup.sh
./src.in
cat src>> envsetup.sh
rm src
chmod a+x envsetup.sh
	echo "done"
}

CONF_OUTPUT_MAKEFILE(){
	echo -n "Creating Makefile ... "
	cat > makefile <<EOF
all: cross-gcc-stage1 cross-gcc-stage2
envsetup.sh: 
build.1st: build.1st.sh
	@cat envsetup.sh >build.1st
	@cat build.1st.sh >>build.1st
	@chmod a+x build.1st
build.2nd: build.2nd.sh
	@cat envsetup.sh >build.2nd
	@cat build.2nd.sh >>build.2nd
	@sed "11,12d" build.2nd > build.2nd.so
	@mv build.2nd.so build.2nd
	@chmod a+x build.2nd
cross-gcc-stage1: build.1st
	@./build.1st
	@touch cross-gcc-stage1
cross-gcc-stage2: cross-gcc-stage1 build.2nd 
	@./build.2nd
	@touch cross-gcc-stage2
clean:
	@rm -rf makefile envsetup.sh build.1st build.2nd cross-gcc-stage1 cross-gcc-stage2
EOF
	echo "done"
}

CONF_WORK(){	
	CONF_MAKEDIR
	CONF_TAR
	#CONF_DEBIAN
	CONF_ROOT
	CONF_SHELL_BASH
	CONF_SH_BASH
	CONF_DIR
	CONF_KPM
	CONF_YACC
	CONF_YACC_BISON
	CONF_AWK
	CONF_AWK_GAWK
	CONF_MAKEINFO
	CONF_PERL
	CONF_PATCH
	CONF_MAKE
	CONF_M4
	CONF_LDD
	CONF_GCC
	CONF_GXX
	CONF_LIBGCC
	CONF_LIBGCC64
	CONF_LANG
	CONF_OUTPUT_ENV
	CONF_OUTPUT_MAKEFILE
}

CONF_PREINIT
PARSE_ARGS "$@"
CONF_WORK


